// Code generated by MockGen. DO NOT EDIT.
// Source: ./saga.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	subtx "github.com/vkaushik/saga/subtx"
)

// MockSubTxDefinitions is a mock of SubTxDefinitions interface.
type MockSubTxDefinitions struct {
	ctrl     *gomock.Controller
	recorder *MockSubTxDefinitionsMockRecorder
}

// MockSubTxDefinitionsMockRecorder is the mock recorder for MockSubTxDefinitions.
type MockSubTxDefinitionsMockRecorder struct {
	mock *MockSubTxDefinitions
}

// NewMockSubTxDefinitions creates a new mock instance.
func NewMockSubTxDefinitions(ctrl *gomock.Controller) *MockSubTxDefinitions {
	mock := &MockSubTxDefinitions{ctrl: ctrl}
	mock.recorder = &MockSubTxDefinitionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubTxDefinitions) EXPECT() *MockSubTxDefinitionsMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSubTxDefinitions) Add(subTxID string, action, compensate interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", subTxID, action, compensate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSubTxDefinitionsMockRecorder) Add(subTxID, action, compensate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSubTxDefinitions)(nil).Add), subTxID, action, compensate)
}

// Get mocks base method.
func (m *MockSubTxDefinitions) Get(subTxID string) (subtx.Definition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", subTxID)
	ret0, _ := ret[0].(subtx.Definition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubTxDefinitionsMockRecorder) Get(subTxID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubTxDefinitions)(nil).Get), subTxID)
}

// MockParamRegister is a mock of ParamRegister interface.
type MockParamRegister struct {
	ctrl     *gomock.Controller
	recorder *MockParamRegisterMockRecorder
}

// MockParamRegisterMockRecorder is the mock recorder for MockParamRegister.
type MockParamRegisterMockRecorder struct {
	mock *MockParamRegister
}

// NewMockParamRegister creates a new mock instance.
func NewMockParamRegister(ctrl *gomock.Controller) *MockParamRegister {
	mock := &MockParamRegister{ctrl: ctrl}
	mock.recorder = &MockParamRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParamRegister) EXPECT() *MockParamRegisterMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockParamRegister) Add(funcObj interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", funcObj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockParamRegisterMockRecorder) Add(funcObj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockParamRegister)(nil).Add), funcObj)
}

// GetRegisteredType mocks base method.
func (m *MockParamRegister) GetRegisteredType(typ string) (reflect.Type, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredType", typ)
	ret0, _ := ret[0].(reflect.Type)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredType indicates an expected call of GetRegisteredType.
func (mr *MockParamRegisterMockRecorder) GetRegisteredType(typ interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredType", reflect.TypeOf((*MockParamRegister)(nil).GetRegisteredType), typ)
}

// GetRegisteredTypeName mocks base method.
func (m *MockParamRegister) GetRegisteredTypeName(t reflect.Type) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegisteredTypeName", t)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegisteredTypeName indicates an expected call of GetRegisteredTypeName.
func (mr *MockParamRegisterMockRecorder) GetRegisteredTypeName(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegisteredTypeName", reflect.TypeOf((*MockParamRegister)(nil).GetRegisteredTypeName), t)
}
